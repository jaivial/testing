---
description: Project Rules
globs: *
---
# Testing and Development Rules

## Project Structure Rules

### Use an app router approach.
- Use an app router approach.

### UI Components library
 - Use UI components from HeroUI (https://www.heroui.com/docs/components) and ReactBits (https://www.reactbits.dev) always, only use plain HTML when you cannot use HeroUI or ReactBits UI components.
 - Install necessary libaries and dependencies with:
   · React Bits: npx jsrepo init https://reactbits.dev/ts/tailwind
   · Hero UI:
   he easiest way to get started with HeroUI is to use the global installation, which means that all the components are imported from a single package.

Follow the steps below to install all HeroUI components:

Install Packages
To install HeroUI, run one of the following commands in your terminal:


npm

yarn

pnpm

bun
Hoisted Dependencies Setup
Note: This step is only for those who use pnpm to install. If you install HeroUI using other package managers, you may skip this step.

If you are using pnpm, you need to add the following line to your .npmrc file to hoist our packages to the root node_modules.

After modifying the .npmrc file, you need to run pnpm install again to ensure that the dependencies are installed correctly.

Tailwind CSS Setup
HeroUI is built on top of Tailwind CSS, so you need to install Tailwind CSS first. You can follow the official installation guide to install Tailwind CSS. Then you need to add the following code to your tailwind.config.js file:

Note: If you are using pnpm and monorepo architecture, please make sure you are pointing to the ROOT node_modules

// tailwind.config.js
const {heroui} = require("@heroui/react");

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    // ...
    // make sure it's pointing to the ROOT node_module
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [heroui()],
};
Provider Setup
It is essential to add the HeroUIProvider at the root of your application.

import * as React from "react";

// 1. import `HeroUIProvider` component
import {HeroUIProvider} from "@heroui/react";

function App() {
  // 2. Wrap HeroUIProvider at the root of your app
  return (
    <HeroUIProvider>
      <YourApplication />
    </HeroUIProvider>
  );
}

### Component Types
1. **Page files** (Page Files)
   - ✅ Only SSR props passing
   - ✅ Page context provider imports
   - ✅ Feature component imports inside context
   - ❌ No useState
   - ❌ No useEffect
   - ❌ No direct HTML
   - ❌ No UI components declarations

2. **Feature Components**
   - ✅ Call variables from page.hooks.ts
   - ✅ Call variables from context hooks
   - ✅ Return only UI Components
   - ❌ No nested feature components
   - ❌ No useState declarations
   - ❌ No useEffect declarations
   - ❌ Minimal HTML usage
   
3. **UI Components**
   - ✅ Pure render components
   - ✅ Only HTML/UI elements
   - ✅ Props usage only
   - ❌ No useState
   - ❌ No useEffect
   - ❌ No custom hooks
   - ❌ No function declarations
   - ❌ No variable declarations

## State Management Rules
- All states must be in `page.hooks.ts`
- All functions must be in `page.hooks.ts`
- All effects must be in `page.hooks.ts`

## Database Rules
- Use local MongoDB
- No Mongoose
- All MongoDB functions must be in `page.server.ts`
- Database schema changes must be documented in `dbschema.md`
- Always read `dbschema.md` before database operations

## Documentation Rules
1. **Error Logging**
   - Document all errors in `errorlogs.md`
   - Include error description
   - Include solution
   - Include prevention steps

2. **Planning**
   - Create detailed steps in `planguide.md`
   - Break down queries into smallest possible steps
   - Include checkable options
   - Mark steps as complete when done
   - Request next step after completion

## Tech Stack Compliance
- Next.js 15
- Tailwind CSS
- Node.js
- MongoDB
- HeroUI Components
- Mobile-first responsive design
- Server-side rendering

## ServerSide rendering whenever is possible
- Use serverside rendering whenever is possible.
- Do not use empty useEffect to fetch data on page load.
❌ useEffect (() => { }, []); 

## useMemo and useCallback
- Apply useMeo and useCallback whenever it is possible to improve app rendering performance.

## File Naming Convention
src/
├── app/ # App Router directory
│   ├── api/ # API routes
│   │   └── route.ts # API endpoints
│   ├── (routes)/ # Route groups
│   │   └── [route]/
│   │       ├── page.tsx # Page component
│   │       ├── layout.tsx # Optional layout
│   │       ├── loading.tsx # Loading UI
│   │       ├── error.tsx # Error UI
│   │       └── not-found.tsx # Not found UI
│   └── layout.tsx # Root layout
├── components/
│   └── [component]/
│       ├── features/ # Feature components
│       └── ui/ # UI components
├── hooks/
│   └── [page]/
│       └── page.hooks.ts
├── server-actions/
│   └── [page]/
│       └── actions.ts # Server actions
└── lib/
    └── [libfolder]/ # Utilities, configs, etc.
docs/ # Outside src folder
├── dbschema.md
├── errorlogs.md
├── planguide.md
└── testingrules.md

## Component Example Structure

typescript
// page.tsx (Page Component)
export default async function Page() {
const serverData = await getServerData();
return (
<PageContextProvider serverData={serverData}>
<FeatureComponent />
</PageContextProvider>
);
}

// features/FeatureComponent.tsx
export function FeatureComponent() {
const { data } = usePageHook();
return <UIComponent data={data} />;
}

// ui/UIComponent.tsx
export function UIComponent({ data }) {
return <div className="tailwind-classes">{data}</div>;
}


## Testing Checklist
- [ ] Verify component type compliance
- [ ] Check for proper hook usage
- [ ] Validate database operations
- [ ] Review mobile responsiveness
- [ ] Confirm SSR implementation
- [ ] Test CRUD operations
- [ ] Verify documentation updates